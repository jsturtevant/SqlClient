// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace ImportsWorld.wit.imports.wasi.sockets.v0_2_1;

public interface IIpNameLookup {

    public class ResolveAddressStream: IDisposable {
        internal int Handle { get; set; }

        public readonly record struct THandle(int Handle);

        public ResolveAddressStream(THandle handle) {
            Handle = handle.Handle;
        }

        public void Dispose() {
            Dispose(true);
        }

        [DllImport("wasi:sockets/ip-name-lookup@0.2.1", EntryPoint = "[resource-drop]resolve-address-stream"), WasmImportLinkage]
        private static extern void wasmImportResourceDrop(int p0);

        protected virtual void Dispose(bool disposing) {
            if (disposing && Handle != 0) {
                wasmImportResourceDrop(Handle);
                Handle = 0;
            }
        }

        internal static class ResolveNextAddressWasmInterop
        {
            [DllImport("wasi:sockets/ip-name-lookup@0.2.1", EntryPoint = "[method]resolve-address-stream.resolve-next-address"), WasmImportLinkage]
            internal static extern void wasmImportResolveNextAddress(int p0, nint p1);

        }

        public   unsafe global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress? ResolveNextAddress()
        {
            var handle = this.Handle;

            var retArea = new ushort[11];
            fixed (ushort* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                ResolveNextAddressWasmInterop.wasmImportResolveNextAddress(handle, ptr);

                Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress?, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode> lifted11;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {

                        global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress? lifted8;

                        switch (new Span<byte>((void*)(ptr + 2), 1)[0]) {
                            case 0: {
                                lifted8 = null;
                                break;
                            }

                            case 1: {

                                global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress lifted;

                                switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                                    case 0: {

                                        lifted = global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress.ipv4((((byte)new Span<byte>((void*)(ptr + 6), 1)[0]), ((byte)new Span<byte>((void*)(ptr + 7), 1)[0]), ((byte)new Span<byte>((void*)(ptr + 8), 1)[0]), ((byte)new Span<byte>((void*)(ptr + 9), 1)[0])
                                        ));
                                        break;
                                    }
                                    case 1: {

                                        lifted = global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress.ipv6((((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 6), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 8), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 10), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 12), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 14), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 16), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 18), 2))), ((ushort)BitConverter.ToUInt16(new Span<byte>((void*)(ptr + 20), 2)))
                                        ));
                                        break;
                                    }

                                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                                }

                                lifted8 = lifted;
                                break;
                            }

                            default: throw new ArgumentException("invalid discriminant: " + (new Span<byte>((void*)(ptr + 2), 1)[0]));
                        }

                        lifted11 = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress?, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.ok(lifted8);
                        break;
                    }
                    case 1: {

                        lifted11 = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.IpAddress?, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.err((global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode)new Span<byte>((void*)(ptr + 2), 1)[0]);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted11.IsOk) {
                    var tmp = lifted11.AsOk;
                    return tmp;
                } else {
                    throw new WitException(lifted11.AsErr!, 0);
                }
            }

            //TODO: free alloc handle (interopString) if exists
        }

        internal static class SubscribeWasmInterop
        {
            [DllImport("wasi:sockets/ip-name-lookup@0.2.1", EntryPoint = "[method]resolve-address-stream.subscribe"), WasmImportLinkage]
            internal static extern int wasmImportSubscribe(int p0);

        }

        public   unsafe global::ImportsWorld.wit.imports.wasi.io.v0_2_1.IPoll.Pollable Subscribe()
        {
            var handle = this.Handle;
            var result =  SubscribeWasmInterop.wasmImportSubscribe(handle);
            var resource = new global::ImportsWorld.wit.imports.wasi.io.v0_2_1.IPoll.Pollable(new global::ImportsWorld.wit.imports.wasi.io.v0_2_1.IPoll.Pollable.THandle(result));
            return resource;

            //TODO: free alloc handle (interopString) if exists
        }

    }

}
