// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace ImportsWorld.wit.imports.wasi.sockets.v0_2_1
{
    public static class IpNameLookupInterop {

        internal static class ResolveAddressesWasmInterop
        {
            [DllImport("wasi:sockets/ip-name-lookup@0.2.1", EntryPoint = "resolve-addresses"), WasmImportLinkage]
            internal static extern void wasmImportResolveAddresses(int p0, nint p1, int p2, nint p3);

        }

        public  static unsafe global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream ResolveAddresses(global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.Network network, string name)
        {
            var handle = network.Handle;

            var result = name;
            IntPtr interopString = InteropString.FromString(result, out int lengthresult);

            var retArea = new uint[2];
            fixed (uint* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                ResolveAddressesWasmInterop.wasmImportResolveAddresses(handle, interopString.ToInt32(), lengthresult, ptr);

                Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode> lifted;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {
                        var resource = new global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream(new global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))));

                        lifted = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.ok(resource);
                        break;
                    }
                    case 1: {

                        lifted = Result<global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.IIpNameLookup.ResolveAddressStream, global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode>.err((global::ImportsWorld.wit.imports.wasi.sockets.v0_2_1.INetwork.ErrorCode)new Span<byte>((void*)(ptr + 4), 1)[0]);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted.IsOk) {
                    var tmp = lifted.AsOk;
                    return tmp;
                } else {
                    throw new WitException(lifted.AsErr!, 0);
                }
            }

            //TODO: free alloc handle (interopString) if exists
        }

    }
}
